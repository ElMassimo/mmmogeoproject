//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace USARoadTrip.Silverlight.WCFServices
{


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/USARoadTrip.Api.Models")]
    public partial class Trip : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> DestinationsField;
        
        private int IdField;
        
        private string NameField;
        
        private string UserNickField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> Destinations {
            get {
                return this.DestinationsField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationsField, value) != true)) {
                    this.DestinationsField = value;
                    this.RaisePropertyChanged("Destinations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserNick {
            get {
                return this.UserNickField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNickField, value) != true)) {
                    this.UserNickField = value;
                    this.RaisePropertyChanged("UserNick");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/USARoadTrip.Api.Models")]
    public partial class Location : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AddressField;
        
        private string CityField;
        
        private int IdField;
        
        private string StateField;
        
        private int TripOrderField;
        
        private string ZipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripOrder {
            get {
                return this.TripOrderField;
            }
            set {
                if ((this.TripOrderField.Equals(value) != true)) {
                    this.TripOrderField = value;
                    this.RaisePropertyChanged("TripOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/USARoadTrip.Api.Models")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NickField;
        
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nick {
            get {
                return this.NickField;
            }
            set {
                if ((object.ReferenceEquals(this.NickField, value) != true)) {
                    this.NickField = value;
                    this.RaisePropertyChanged("Nick");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFServices.IRoadTripServices")]
    public interface IRoadTripServices {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/CreateTrip", ReplyAction="http://tempuri.org/IRoadTripServices/CreateTripResponse")]
        System.IAsyncResult BeginCreateTrip(USARoadTrip.Silverlight.WCFServices.Trip tripModel, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/DeleteTrip", ReplyAction="http://tempuri.org/IRoadTripServices/DeleteTripResponse")]
        System.IAsyncResult BeginDeleteTrip(int tripId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/UpdateTrip", ReplyAction="http://tempuri.org/IRoadTripServices/UpdateTripResponse")]
        System.IAsyncResult BeginUpdateTrip(USARoadTrip.Silverlight.WCFServices.Trip tripModel, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/GetTripDestinations", ReplyAction="http://tempuri.org/IRoadTripServices/GetTripDestinationsResponse")]
        System.IAsyncResult BeginGetTripDestinations(int tripId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> EndGetTripDestinations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/Register", ReplyAction="http://tempuri.org/IRoadTripServices/RegisterResponse")]
        System.IAsyncResult BeginRegister(USARoadTrip.Silverlight.WCFServices.User userModel, System.AsyncCallback callback, object asyncState);
        
        bool EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/Login", ReplyAction="http://tempuri.org/IRoadTripServices/LoginResponse")]
        System.IAsyncResult BeginLogin(string nick, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRoadTripServices/GetUserTrips", ReplyAction="http://tempuri.org/IRoadTripServices/GetUserTripsResponse")]
        System.IAsyncResult BeginGetUserTrips(string nick, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip> EndGetUserTrips(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoadTripServicesChannel : USARoadTrip.Silverlight.WCFServices.IRoadTripServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTripDestinationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTripDestinationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserTripsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserTripsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoadTripServicesClient : System.ServiceModel.ClientBase<USARoadTrip.Silverlight.WCFServices.IRoadTripServices>, USARoadTrip.Silverlight.WCFServices.IRoadTripServices {
        
        private BeginOperationDelegate onBeginCreateTripDelegate;
        
        private EndOperationDelegate onEndCreateTripDelegate;
        
        private System.Threading.SendOrPostCallback onCreateTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTripDelegate;
        
        private EndOperationDelegate onEndDeleteTripDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTripDelegate;
        
        private EndOperationDelegate onEndUpdateTripDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTripDestinationsDelegate;
        
        private EndOperationDelegate onEndGetTripDestinationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTripDestinationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserTripsDelegate;
        
        private EndOperationDelegate onEndGetUserTripsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserTripsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RoadTripServicesClient() {
        }
        
        public RoadTripServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoadTripServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoadTripServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoadTripServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreateTripCompletedEventArgs> CreateTripCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTripCompleted;
        
        public event System.EventHandler<UpdateTripCompletedEventArgs> UpdateTripCompleted;
        
        public event System.EventHandler<GetTripDestinationsCompletedEventArgs> GetTripDestinationsCompleted;
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetUserTripsCompletedEventArgs> GetUserTripsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginCreateTrip(USARoadTrip.Silverlight.WCFServices.Trip tripModel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateTrip(tripModel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndCreateTrip(System.IAsyncResult result) {
            return base.Channel.EndCreateTrip(result);
        }
        
        private System.IAsyncResult OnBeginCreateTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            USARoadTrip.Silverlight.WCFServices.Trip tripModel = ((USARoadTrip.Silverlight.WCFServices.Trip)(inValues[0]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginCreateTrip(tripModel, callback, asyncState);
        }
        
        private object[] OnEndCreateTrip(System.IAsyncResult result) {
            bool retVal = ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndCreateTrip(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateTripCompleted(object state) {
            if ((this.CreateTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateTripCompleted(this, new CreateTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateTripAsync(USARoadTrip.Silverlight.WCFServices.Trip tripModel) {
            this.CreateTripAsync(tripModel, null);
        }
        
        public void CreateTripAsync(USARoadTrip.Silverlight.WCFServices.Trip tripModel, object userState) {
            if ((this.onBeginCreateTripDelegate == null)) {
                this.onBeginCreateTripDelegate = new BeginOperationDelegate(this.OnBeginCreateTrip);
            }
            if ((this.onEndCreateTripDelegate == null)) {
                this.onEndCreateTripDelegate = new EndOperationDelegate(this.OnEndCreateTrip);
            }
            if ((this.onCreateTripCompletedDelegate == null)) {
                this.onCreateTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateTripCompleted);
            }
            base.InvokeAsync(this.onBeginCreateTripDelegate, new object[] {
                        tripModel}, this.onEndCreateTripDelegate, this.onCreateTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginDeleteTrip(int tripId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTrip(tripId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndDeleteTrip(System.IAsyncResult result) {
            base.Channel.EndDeleteTrip(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int tripId = ((int)(inValues[0]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginDeleteTrip(tripId, callback, asyncState);
        }
        
        private object[] OnEndDeleteTrip(System.IAsyncResult result) {
            ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndDeleteTrip(result);
            return null;
        }
        
        private void OnDeleteTripCompleted(object state) {
            if ((this.DeleteTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTripCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTripAsync(int tripId) {
            this.DeleteTripAsync(tripId, null);
        }
        
        public void DeleteTripAsync(int tripId, object userState) {
            if ((this.onBeginDeleteTripDelegate == null)) {
                this.onBeginDeleteTripDelegate = new BeginOperationDelegate(this.OnBeginDeleteTrip);
            }
            if ((this.onEndDeleteTripDelegate == null)) {
                this.onEndDeleteTripDelegate = new EndOperationDelegate(this.OnEndDeleteTrip);
            }
            if ((this.onDeleteTripCompletedDelegate == null)) {
                this.onDeleteTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTripCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTripDelegate, new object[] {
                        tripId}, this.onEndDeleteTripDelegate, this.onDeleteTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginUpdateTrip(USARoadTrip.Silverlight.WCFServices.Trip tripModel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTrip(tripModel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndUpdateTrip(System.IAsyncResult result) {
            return base.Channel.EndUpdateTrip(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            USARoadTrip.Silverlight.WCFServices.Trip tripModel = ((USARoadTrip.Silverlight.WCFServices.Trip)(inValues[0]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginUpdateTrip(tripModel, callback, asyncState);
        }
        
        private object[] OnEndUpdateTrip(System.IAsyncResult result) {
            bool retVal = ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndUpdateTrip(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTripCompleted(object state) {
            if ((this.UpdateTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTripCompleted(this, new UpdateTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTripAsync(USARoadTrip.Silverlight.WCFServices.Trip tripModel) {
            this.UpdateTripAsync(tripModel, null);
        }
        
        public void UpdateTripAsync(USARoadTrip.Silverlight.WCFServices.Trip tripModel, object userState) {
            if ((this.onBeginUpdateTripDelegate == null)) {
                this.onBeginUpdateTripDelegate = new BeginOperationDelegate(this.OnBeginUpdateTrip);
            }
            if ((this.onEndUpdateTripDelegate == null)) {
                this.onEndUpdateTripDelegate = new EndOperationDelegate(this.OnEndUpdateTrip);
            }
            if ((this.onUpdateTripCompletedDelegate == null)) {
                this.onUpdateTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTripCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTripDelegate, new object[] {
                        tripModel}, this.onEndUpdateTripDelegate, this.onUpdateTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginGetTripDestinations(int tripId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTripDestinations(tripId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndGetTripDestinations(System.IAsyncResult result) {
            return base.Channel.EndGetTripDestinations(result);
        }
        
        private System.IAsyncResult OnBeginGetTripDestinations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int tripId = ((int)(inValues[0]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginGetTripDestinations(tripId, callback, asyncState);
        }
        
        private object[] OnEndGetTripDestinations(System.IAsyncResult result) {
            System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> retVal = ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndGetTripDestinations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTripDestinationsCompleted(object state) {
            if ((this.GetTripDestinationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTripDestinationsCompleted(this, new GetTripDestinationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTripDestinationsAsync(int tripId) {
            this.GetTripDestinationsAsync(tripId, null);
        }
        
        public void GetTripDestinationsAsync(int tripId, object userState) {
            if ((this.onBeginGetTripDestinationsDelegate == null)) {
                this.onBeginGetTripDestinationsDelegate = new BeginOperationDelegate(this.OnBeginGetTripDestinations);
            }
            if ((this.onEndGetTripDestinationsDelegate == null)) {
                this.onEndGetTripDestinationsDelegate = new EndOperationDelegate(this.OnEndGetTripDestinations);
            }
            if ((this.onGetTripDestinationsCompletedDelegate == null)) {
                this.onGetTripDestinationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTripDestinationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTripDestinationsDelegate, new object[] {
                        tripId}, this.onEndGetTripDestinationsDelegate, this.onGetTripDestinationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginRegister(USARoadTrip.Silverlight.WCFServices.User userModel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(userModel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            USARoadTrip.Silverlight.WCFServices.User userModel = ((USARoadTrip.Silverlight.WCFServices.User)(inValues[0]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginRegister(userModel, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            bool retVal = ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(USARoadTrip.Silverlight.WCFServices.User userModel) {
            this.RegisterAsync(userModel, null);
        }
        
        public void RegisterAsync(USARoadTrip.Silverlight.WCFServices.User userModel, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        userModel}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginLogin(string nick, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(nick, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nick = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginLogin(nick, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            bool retVal = ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string nick, string password) {
            this.LoginAsync(nick, password, null);
        }
        
        public void LoginAsync(string nick, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        nick,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult USARoadTrip.Silverlight.WCFServices.IRoadTripServices.BeginGetUserTrips(string nick, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserTrips(nick, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip> USARoadTrip.Silverlight.WCFServices.IRoadTripServices.EndGetUserTrips(System.IAsyncResult result) {
            return base.Channel.EndGetUserTrips(result);
        }
        
        private System.IAsyncResult OnBeginGetUserTrips(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nick = ((string)(inValues[0]));
            return ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).BeginGetUserTrips(nick, callback, asyncState);
        }
        
        private object[] OnEndGetUserTrips(System.IAsyncResult result) {
            System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip> retVal = ((USARoadTrip.Silverlight.WCFServices.IRoadTripServices)(this)).EndGetUserTrips(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserTripsCompleted(object state) {
            if ((this.GetUserTripsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserTripsCompleted(this, new GetUserTripsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserTripsAsync(string nick) {
            this.GetUserTripsAsync(nick, null);
        }
        
        public void GetUserTripsAsync(string nick, object userState) {
            if ((this.onBeginGetUserTripsDelegate == null)) {
                this.onBeginGetUserTripsDelegate = new BeginOperationDelegate(this.OnBeginGetUserTrips);
            }
            if ((this.onEndGetUserTripsDelegate == null)) {
                this.onEndGetUserTripsDelegate = new EndOperationDelegate(this.OnEndGetUserTrips);
            }
            if ((this.onGetUserTripsCompletedDelegate == null)) {
                this.onGetUserTripsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserTripsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserTripsDelegate, new object[] {
                        nick}, this.onEndGetUserTripsDelegate, this.onGetUserTripsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override USARoadTrip.Silverlight.WCFServices.IRoadTripServices CreateChannel() {
            return new RoadTripServicesClientChannel(this);
        }
        
        private class RoadTripServicesClientChannel : ChannelBase<USARoadTrip.Silverlight.WCFServices.IRoadTripServices>, USARoadTrip.Silverlight.WCFServices.IRoadTripServices {
            
            public RoadTripServicesClientChannel(System.ServiceModel.ClientBase<USARoadTrip.Silverlight.WCFServices.IRoadTripServices> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateTrip(USARoadTrip.Silverlight.WCFServices.Trip tripModel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tripModel;
                System.IAsyncResult _result = base.BeginInvoke("CreateTrip", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCreateTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CreateTrip", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTrip(int tripId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tripId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTrip", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteTrip", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateTrip(USARoadTrip.Silverlight.WCFServices.Trip tripModel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tripModel;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTrip", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateTrip", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTripDestinations(int tripId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tripId;
                System.IAsyncResult _result = base.BeginInvoke("GetTripDestinations", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> EndGetTripDestinations(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location> _result = ((System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Location>)(base.EndInvoke("GetTripDestinations", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegister(USARoadTrip.Silverlight.WCFServices.User userModel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userModel;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string nick, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = nick;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserTrips(string nick, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nick;
                System.IAsyncResult _result = base.BeginInvoke("GetUserTrips", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip> EndGetUserTrips(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip> _result = ((System.Collections.Generic.List<USARoadTrip.Silverlight.WCFServices.Trip>)(base.EndInvoke("GetUserTrips", _args, result)));
                return _result;
            }
        }
    }
}
